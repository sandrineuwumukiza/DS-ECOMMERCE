{
    "swagger": "2.0",
    "info": {
      "title": "GIRAICT End Point API",
      "description": "API documentation for Pizza Shop app",
      "version": "1.0.0"
    },
    "host": "localhost:3002",
    "basePath": "",
    "schemes": [
      "http",
      "https"
    ],
    "securityDefinitions": {
      "BearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Enter JWT token in the format: Bearer <token>"
      }
    },
    "tags": [
      {
        "name": "User Operations",
        "description": "Operations for regular users"
      },
      {
        "name": "Admin Operations",
        "description": "Operations that can only be performed by admin users"
      }
    ],
    "paths": {
      "/users/registerUser": {
        "post": {
          "summary": "Create an account",
          "description": "Register a new user with role (user or admin)",
          "tags": [
            "Buyer Auth"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/RegisterUserRequest"
              },
              "required": true,
              "description": "User registration details"
            }
          ],
          "responses": {
            "201": {
              "description": "User created"
            },
            "400": {
              "description": "Bad request - User already exists or missing fields"
            }
          }
        }
      },
      "/users/login": {
        "post": {
          "summary": "Login into your account",
          "description": "Authenticate and login an existing user",
          "tags": [
            "Buyer Auth"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/LoginRequest"
              },
              "required": true,
              "description": "User login credentials"
            }
          ],
          "responses": {
            "200": {
              "description": "User logged in successfully"
            },
            "400": {
              "description": "Bad request - Invalid credentials"
            }
          }
        }
      },
      "/users/verifyemail/{token}": {
      "get": {
        "summary": "Verify email",
        "description": "Verify a user’s email address using a verification token",
        "tags": [
          "Buyer Auth"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string",
            "description": "Email verification token"
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        }
      }
    },
      "/users/forgotpassword": {
      "post": {
        "summary": "Forgot password",
        "description": "Send a password reset email",
        "tags": [
          "Buyer Auth"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ForgotPasswordRequest"
            },
            "required": true,
            "description": "User’s email address to send the reset link"
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset email sent"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
      "/users/resetpassword/{token}": {
      "put": {
        "summary": "Reset password",
        "description": "Reset user password using a reset token",
        "tags": [
          "Buyer Auth"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string",
            "description": "Password reset token"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            },
            "required": true,
            "description": "New password details"
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successful"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        }
      }
      },
      "/users/delete/{id}": {
  "delete": {
    "summary": "Delete a user by ID",
    "description": "Deletes a user from the database based on the provided user ID. This action can only be performed by an admin.",
    "tags": [
      "Buyer Auth"
    ],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "ID of the user to delete",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "User deleted successfully"
      },
      "404": {
        "description": "User not found"
      },
      "500": {
        "description": "Server error"
      }
    },
    "security": [
      {
        "BearerAuth": []
      }
    ]
  }
},
   
      "/products/addProduct": {
        "post": {
          "summary": "Create a new Product",
          "description": "Add a new product to the database",
          "tags": [
            "Product"
          ],
          "consumes": [
            "multipart/form-data"
          ],
          "parameters": [
            {
              "in": "formData",
              "name": "user",
              "type": "string",
              "required": true,
              "description": "User ID of the product owner"
            },
            {
              "in": "formData",
              "name": "name",
              "type": "string",
              "required": true,
              "description": "Product name"
            },
            {
              "in": "formData",
              "name": "description",
              "type": "string",
              "required": true,
              "description": "Product description"
            },
            {
              "in": "formData",
              "name": "price",
              "type": "number",
              "required": true,
              "description": "Product price"
            },
            {
              "in": "formData",
              "name": "discountPrice",
              "type": "number",
              "description": "Discounted price of the product (must be less than regular price)"
            },
            {
              "in": "formData",
              "name": "sale",
              "type": "boolean",
              "description": "Indicates if the product is on sale"
            },
            {
              "in": "formData",
              "name": "category",
              "type": "string",
              "enum": ["Air Conditioners", "Gadgets", "Home Appliances", "Kitchen Appliances", "Computer", "Refrigerator", "Smart Phone"],
              "required": true,
              "description": "Product category"
            },
            {
              "in": "formData",
              "name": "stock",
              "type": "number",
              "required": true,
              "description": "Number of items in stock"
            },
            {
              "in": "formData",
              "name": "features",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of product features"
            },
            {
              "in": "formData",
              "name": "images",
              "type": "array",
              "items": {
                "type": "file"
              },
              "description": "Array of product images"
            },
            {
              "in": "formData",
              "name": "imageTypes",
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["default", "hover", "gallery"]
              },
              "description": "Array of image types corresponding to the images"
            }
          ],
          "security": [
            {
              "BearerAuth": []
            }
          ],
          "responses": {
            "201": {
              "description": "Product created successfully"
            },
            "400": {
              "description": "Bad request - Validation error"
            }
          }
        }
      },
      "/products/productList": {
        "get": {
          "summary": "Get all products",
          "description": "Retrieve a list of all products",
          "tags": [
            "Product"
          ],
          "responses": {
            "200": {
              "description": "Successful retrieval"
            },
            "404": {
              "description": "Products not found"
            }
          }
        }
      },
      "/products/productById/{id}": {
        "get": {
          "summary": "Get product by ID",
          "description": "Retrieve a product by its ID",
          "tags": [
            "Product"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "ID of the product to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful retrieval"
            },
            "404": {
              "description": "Product not found"
            }
          }
        }
      },
      "/products/category/{category}": {
        "get": {
          "summary": "Get product by category",
          "description": "Retrieve a product by its category",
          "tags": [
            "Product"
          ],
          "parameters": [
            {
              "name": "category",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Category of the product to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful retrieval"
            },
            "404": {
              "description": "Product not found"
            }
          }
        }
      },
     "/products/updateProduct/{id}": {
  "put": {
    "summary": "Update a product by ID",
    "description": "Update an existing product in the database by its ID, including images",
    "tags": [
      "Product"
    ],
    "consumes": [
      "multipart/form-data"
    ],
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "ID of the product to update"
      },
      {
        "in": "formData",
        "name": "user",
        "type": "string",
        "description": "User ID of the product owner"
      },
      {
        "in": "formData",
        "name": "name",
        "type": "string",
        "description": "Product name"
      },
      {
        "in": "formData",
        "name": "description",
        "type": "string",
        "description": "Product description"
      },
      {
        "in": "formData",
        "name": "price",
        "type": "number",
        "description": "Product price"
      },
      {
        "in": "formData",
        "name": "discountPrice",
        "type": "number",
        "description": "Discounted price of the product (must be less than regular price)"
      },
      {
        "in": "formData",
        "name": "sale",
        "type": "boolean",
        "description": "Indicates if the product is on sale"
      },
      {
        "in": "formData",
        "name": "category",
        "type": "string",
        "enum": ["Air Conditioners", "Gadgets", "Home Appliances", "Kitchen Appliances", "Computer", "Refrigerator", "Smart Phone"],
        "description": "Product category"
      },
      {
        "in": "formData",
        "name": "stock",
        "type": "number",
        "description": "Number of items in stock"
      },
      {
        "in": "formData",
        "name": "features",
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of product features"
      },
      {
        "in": "formData",
        "name": "images",
        "type": "array",
        "items": {
          "type": "file"
        },
        "description": "Array of product images"
      },
      {
        "in": "formData",
        "name": "imageTypes",
        "type": "array",
        "items": {
          "type": "string",
          "enum": ["default", "hover", "gallery"]
        },
        "description": "Array of image types corresponding to the images"
      }
    ],
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": {
      "200": {
        "description": "Product updated successfully"
      },
      "400": {
        "description": "Bad request - Validation error"
      },
      "404": {
        "description": "Product not found"
      }
    }
  }
},
      "/products/deleteProduct/{id}": {
        "delete": {
          "summary": "Delete product by ID",
          "description": "Delete an existing product by its ID",
          "tags": [
            "Product"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "ID of the product to delete"
            }
          ],
          "responses": {
            "204": {
              "description": "Product deleted successfully"
            },
            "404": {
              "description": "Product not found"
            }
          }
        }
      },
      "/cart/addToCart": {
        "post": {
          "summary": "Add product to cart",
          "description": "Add a product to the user's cart",
          "tags": [
            "Cart"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/AddToCartRequest"
              },
              "required": true,
              "description": "Product details to add to cart"
            }
          ],
          "security": [
            {
              "BearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Product added to cart successfully"
            },
            "400": {
              "description": "Bad request - Invalid product data"
            }
          }
        }
      },
      "/cart/removeFromCart/{id}": {
        "delete": {
          "summary": "Remove product from cart",
          "description": "Remove a product from the user's cart by product ID",
          "tags": [
            "Cart"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "ID of the product to remove from cart"
            }
          ],
          "security": [
            {
              "BearerAuth": []
            }
          ],
          "responses": {
            "204": {
              "description": "Product removed from cart successfully"
            },
            "404": {
              "description": "Product not found in cart"
            }
          }
        }
      },
      "/cart/viewCart": {
        "get": {
          "summary": "View cart",
          "description": "Retrieve the user's current cart contents",
          "tags": [
            "Cart"
          ],
          "security": [
            {
              "BearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Successful retrieval of cart contents"
            },
            "404": {
              "description": "Cart not found"
            }
          }
        }
      },
      "/cart/checkout": {
        "post": {
          "summary": "Checkout",
          "description": "Complete the purchase and clear the cart",
          "tags": [
            "Cart"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/CheckoutRequest"
              },
              "required": true,
              "description": "Checkout details"
            }
          ],
          "responses": {
            "200": {
              "description": "Checkout successful"
            },
            "400": {
              "description": "Bad request - Invalid checkout details"
            }
          }
        }
      },
      "/users/profile": {
        "get": {
          "summary": "Get user profile",
          "description": "Retrieve the profile of the currently authenticated user",
          "tags": [
            "User"
          ],
          "security": [
            {
              "BearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Successful retrieval of user profile"
            },
            "401": {
              "description": "Unauthorized - User not authenticated"
            }
          }
        }
      },
      "/users/profile/update": {
        "put": {
          "summary": "Update user profile",
          "description": "Update the profile information of the currently authenticated user",
          "tags": [
            "User"
          ],
          "security": [
            {
              "BearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/UserProfileUpdateRequest"
              },
              "required": true,
              "description": "Updated profile information"
            }
          ],
          "responses": {
            "200": {
              "description": "Profile updated successfully"
            },
            "400": {
              "description": "Bad request - Invalid profile data"
            },
            "401": {
              "description": "Unauthorized - User not authenticated"
            }
          }
        }
      },
      "/users/profile/${id}": {
        "delete": {
          "summary": "Delete user profile",
          "description": "Delete the profile of the currently authenticated user",
          "tags": [
            "User"
          ],
          "security": [
            {
              "BearerAuth": []
            }
          ],
          "responses": {
            "204": {
              "description": "Profile deleted successfully"
            },
            "401": {
              "description": "Unauthorized - User not authenticated"
            }
          }
        }
      }
    },
    "definitions": {
      "RegisterUserRequest": {
        "type": "object",
        "properties": {
          "username": {
          "type": "string",
          "description": "The username of the user"
        },
        "email": {
          "type": "string",
          "description": "The email address of the user"
        },
        "password": {
          "type": "string",
          "description": "The password for the user account"
        },
        "role": {
          "type": "string",
          "enum": [
            "user",
            "admin"
          ],
          "description": "The role of the user"
        }
        },
        "required": [
          "username",
          "email",
          "password",
          "role"
        ]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "ForgotPasswordRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email address of the user requesting a password reset"
        }
      },
      "required": [
        "email"
      ]
    },
    "ResetPasswordRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "The new password for the user account"
        }
      },
      "required": [
        "password"
      ]
    },
      "Product": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "category": {
            "type": "string",
            "enum": [
              "Food",
              "Fruits",
              "Alcohol",
              "Soft drinks and Juice",
              "Coffee",
              "Wine"
            ]
          }
        },
        "required": [
          "userId",
          "productName",
          "description",
          "price",
          "category"
        ]
      },
      "AddToCartRequest": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "CheckoutRequest": {
        "type": "object",
        "properties": {
          "paymentMethod": {
            "type": "string",
            "enum": [
              "credit_card",
              "paypal",
              "mobilemoney"
            ]
          },
          "shippingAddress": {
            "type": "string"
          }
        },
        "required": [
          "paymentMethod",
          "shippingAddress"
        ]
      },
      "UserProfileUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      }
    }
  }
  